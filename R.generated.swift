//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle
  var image: image { .init(bundle: bundle) }
  var entitlements: entitlements { .init() }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var reuseIdentifier: reuseIdentifier { .init() }
  var storyboard: storyboard { .init(bundle: bundle) }

  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.image` struct is generated, and contains static references to 52 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `3D`.
    var d: RswiftResources.ImageResource { .init(name: "3D", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `4K`.
    var k: RswiftResources.ImageResource { .init(name: "4K", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Back`.
    var back: RswiftResources.ImageResource { .init(name: "Back", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Background`.
    var background: RswiftResources.ImageResource { .init(name: "Background", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Cancel-50`.
    var cancel50: RswiftResources.ImageResource { .init(name: "Cancel-50", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Cartoons`.
    var cartoons: RswiftResources.ImageResource { .init(name: "Cartoons", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Chevron Down Filled-50`.
    var chevronDownFilled50: RswiftResources.ImageResource { .init(name: "Chevron Down Filled-50", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Circled User Male Filled-50`.
    var circledUserMaleFilled50: RswiftResources.ImageResource { .init(name: "Circled User Male Filled-50", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Circled User Male-100`.
    var circledUserMale100: RswiftResources.ImageResource { .init(name: "Circled User Male-100", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Circled User Male-50`.
    var circledUserMale50: RswiftResources.ImageResource { .init(name: "Circled User Male-50", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Collection`.
    var collection: RswiftResources.ImageResource { .init(name: "Collection", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Concert`.
    var concert: RswiftResources.ImageResource { .init(name: "Concert", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Delete`.
    var delete: RswiftResources.ImageResource { .init(name: "Delete", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Documentary Movie`.
    var documentaryMovie: RswiftResources.ImageResource { .init(name: "Documentary Movie", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Documentary Series`.
    var documentarySeries: RswiftResources.ImageResource { .init(name: "Documentary Series", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Download`.
    var download: RswiftResources.ImageResource { .init(name: "Download", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Download Pause`.
    var downloadPause: RswiftResources.ImageResource { .init(name: "Download Pause", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Download Start`.
    var downloadStart: RswiftResources.ImageResource { .init(name: "Download Start", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Download-bar`.
    var downloadBar: RswiftResources.ImageResource { .init(name: "Download-bar", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Eye`.
    var eye: RswiftResources.ImageResource { .init(name: "Eye", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Eye (Views)`.
    var eyeViews: RswiftResources.ImageResource { .init(name: "Eye (Views)", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Eye Fill`.
    var eyeFill: RswiftResources.ImageResource { .init(name: "Eye Fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Filters`.
    var filters: RswiftResources.ImageResource { .init(name: "Filters", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Filters Fill`.
    var filtersFill: RswiftResources.ImageResource { .init(name: "Filters Fill", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Folder`.
    var folder: RswiftResources.ImageResource { .init(name: "Folder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Folder Add`.
    var folderAdd: RswiftResources.ImageResource { .init(name: "Folder Add", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `IMDB`.
    var imdB: RswiftResources.ImageResource { .init(name: "IMDB", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Icon-App-iTunes`.
    var iconAppITunes: RswiftResources.ImageResource { .init(name: "Icon-App-iTunes", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `KinoPub`.
    var kinoPub: RswiftResources.ImageResource { .init(name: "KinoPub", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Kinopoisk`.
    var kinopoisk: RswiftResources.ImageResource { .init(name: "Kinopoisk", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Kinopub (Menu)`.
    var kinopubMenu: RswiftResources.ImageResource { .init(name: "Kinopub (Menu)", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Kinopub Footer`.
    var kinopubFooter: RswiftResources.ImageResource { .init(name: "Kinopub Footer", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Main`.
    var main: RswiftResources.ImageResource { .init(name: "Main", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `More`.
    var more: RswiftResources.ImageResource { .init(name: "More", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Move`.
    var move: RswiftResources.ImageResource { .init(name: "Move", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Movies`.
    var movies: RswiftResources.ImageResource { .init(name: "Movies", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Ok`.
    var ok: RswiftResources.ImageResource { .init(name: "Ok", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Placeholder`.
    var placeholder: RswiftResources.ImageResource { .init(name: "Placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Play Button (Shadow)`.
    var playButtonShadow: RswiftResources.ImageResource { .init(name: "Play Button (Shadow)", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SafariActivity`.
    var safariActivity: RswiftResources.ImageResource { .init(name: "SafariActivity", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Series`.
    var series: RswiftResources.ImageResource { .init(name: "Series", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Settings`.
    var settings: RswiftResources.ImageResource { .init(name: "Settings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Share`.
    var share: RswiftResources.ImageResource { .init(name: "Share", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Sports`.
    var sports: RswiftResources.ImageResource { .init(name: "Sports", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Sports-placeholder`.
    var sportsPlaceholder: RswiftResources.ImageResource { .init(name: "Sports-placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Television`.
    var television: RswiftResources.ImageResource { .init(name: "Television", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Views`.
    var views: RswiftResources.ImageResource { .init(name: "Views", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `episode`.
    var episode: RswiftResources.ImageResource { .init(name: "episode", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `icon`.
    var icon: RswiftResources.ImageResource { .init(name: "icon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `pause`.
    var pause: RswiftResources.ImageResource { .init(name: "pause", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `play`.
    var play: RswiftResources.ImageResource { .init(name: "play", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `poster-placeholder`.
    var posterPlaceholder: RswiftResources.ImageResource { .init(name: "poster-placeholder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let keychainAccessGroups = keychainAccessGroups()
    struct keychainAccessGroups {
      let appIdentifierPrefixXyzDatsKinoPub: String = "$(AppIdentifierPrefix)xyz.dats.KinoPub"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `UniSansBold`.
    var uniSansBold: RswiftResources.FontResource { .init(name: "UniSansBold", bundle: bundle, filename: "UniSansBold.otf") }

    /// Font `UniSansSemiBold`.
    var uniSansSemiBold: RswiftResources.FontResource { .init(name: "UniSansSemiBold", bundle: bundle, filename: "UniSansSemiBold.otf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [uniSansBold, uniSansSemiBold].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 4 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `CHANGELOG.md`.
    var changelogMd: RswiftResources.FileResource { .init(name: "CHANGELOG", pathExtension: "md", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `UniSansBold.otf`.
    var uniSansBoldOtf: RswiftResources.FileResource { .init(name: "UniSansBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `UniSansSemiBold.otf`.
    var uniSansSemiBoldOtf: RswiftResources.FileResource { .init(name: "UniSansSemiBold", pathExtension: "otf", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.nib` struct is generated, and contains static references to 26 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `ActorCollectionViewCell`.
    var actorCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<ActorCollectionViewCell, ActorCollectionViewCell> { .init(name: "ActorCollectionViewCell", bundle: bundle, identifier: "ActorCollectionViewCell") }

    /// Nib `BookmarkTableViewCell`.
    var bookmarkTableViewCell: RswiftResources.NibReferenceReuseIdentifier<BookmarkTableViewCell, BookmarkTableViewCell> { .init(name: "BookmarkTableViewCell", bundle: bundle, identifier: "BookmarkTableViewCell") }

    /// Nib `ButtonsTableViewCell`.
    var buttonsTableViewCell: RswiftResources.NibReferenceReuseIdentifier<ButtonsTableViewCell, ButtonsTableViewCell> { .init(name: "ButtonsTableViewCell", bundle: bundle, identifier: "ButtonsTableViewCell") }

    /// Nib `CastTableViewCell`.
    var castTableViewCell: RswiftResources.NibReferenceReuseIdentifier<CastTableViewCell, CastTableViewCell> { .init(name: "CastTableViewCell", bundle: bundle, identifier: "CastTableViewCell") }

    /// Nib `CommentsTableViewCell`.
    var commentsTableViewCell: RswiftResources.NibReference<CommentsTableViewCell> { .init(name: "CommentsTableViewCell", bundle: bundle) }

    /// Nib `DescTableViewCell`.
    var descTableViewCell: RswiftResources.NibReferenceReuseIdentifier<DescTableViewCell, DescTableViewCell> { .init(name: "DescTableViewCell", bundle: bundle, identifier: "DescTableViewCell") }

    /// Nib `DowloadedTableViewCell`.
    var dowloadedTableViewCell: RswiftResources.NibReferenceReuseIdentifier<DowloadedTableViewCell, DowloadedTableViewCell> { .init(name: "DowloadedTableViewCell", bundle: bundle, identifier: "DowloadedTableViewCell") }

    /// Nib `DownloadingTableViewCell`.
    var downloadingTableViewCell: RswiftResources.NibReferenceReuseIdentifier<DownloadingTableViewCell, DownloadingTableViewCell> { .init(name: "DownloadingTableViewCell", bundle: bundle, identifier: "DownloadingTableViewCell") }

    /// Nib `EpisodeTableViewCell`.
    var episodeTableViewCell: RswiftResources.NibReferenceReuseIdentifier<EpisodeTableViewCell, EpisodeTableViewCell> { .init(name: "EpisodeTableViewCell", bundle: bundle, identifier: "EpisodeTableViewCell") }

    /// Nib `EpisodesCollectionViewCell`.
    var episodesCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<EpisodesCollectionViewCell, EpisodesCollectionViewCell> { .init(name: "EpisodesCollectionViewCell", bundle: bundle, identifier: "EpisodesCollectionViewCell") }

    /// Nib `HintsView`.
    var hintsView: RswiftResources.NibReference<HintsView> { .init(name: "HintsView", bundle: bundle) }

    /// Nib `InfoTableViewCell`.
    var infoTableViewCell: RswiftResources.NibReferenceReuseIdentifier<InfoTableViewCell, InfoTableViewCell> { .init(name: "InfoTableViewCell", bundle: bundle, identifier: "InfoTableViewCell") }

    /// Nib `ItemCollectionViewCell`.
    var itemCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<ItemCollectionViewCell, ItemCollectionViewCell> { .init(name: "ItemCollectionViewCell", bundle: bundle, identifier: "ItemCollectionViewCell") }

    /// Nib `ItemsTableViewCell`.
    var itemsTableViewCell: RswiftResources.NibReferenceReuseIdentifier<ItemsTableViewCell, ItemsTableViewCell> { .init(name: "ItemsTableViewCell", bundle: bundle, identifier: "ItemsTableViewCell") }

    /// Nib `LoadingItemCollectionViewCell`.
    var loadingItemCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<LoadingItemCollectionViewCell, LoadingItemCollectionViewCell> { .init(name: "LoadingItemCollectionViewCell", bundle: bundle, identifier: "LoadingItemCollectionViewCell") }

    /// Nib `MenuTableViewCell`.
    var menuTableViewCell: RswiftResources.NibReferenceReuseIdentifier<MenuTableViewCell, MenuTableViewCell> { .init(name: "MenuTableViewCell", bundle: bundle, identifier: "MenuTableViewCell") }

    /// Nib `RatingTableViewCell`.
    var ratingTableViewCell: RswiftResources.NibReferenceReuseIdentifier<RatingTableViewCell, RatingTableViewCell> { .init(name: "RatingTableViewCell", bundle: bundle, identifier: "RatingTableViewCell") }

    /// Nib `SearchCollectionReusableView`.
    var searchCollectionReusableView: RswiftResources.NibReferenceReuseIdentifier<SearchCollectionReusableView, SearchCollectionReusableView> { .init(name: "SearchCollectionReusableView", bundle: bundle, identifier: "SearchCollectionReusableView") }

    /// Nib `SearchResultTableViewCell`.
    var searchResultTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SearchResultTableViewCell, SearchResultTableViewCell> { .init(name: "SearchResultTableViewCell", bundle: bundle, identifier: "SearchResultTableViewCell") }

    /// Nib `SeasonHeaderView`.
    var seasonHeaderView: RswiftResources.NibReferenceReuseIdentifier<SeasonHeaderView, SeasonHeaderView> { .init(name: "SeasonHeaderView", bundle: bundle, identifier: "SeasonHeaderView") }

    /// Nib `SeasonTableViewCell`.
    var seasonTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SeasonTableViewCell, SeasonTableViewCell> { .init(name: "SeasonTableViewCell", bundle: bundle, identifier: "SeasonTableViewCell") }

    /// Nib `SimilarTableViewCell`.
    var similarTableViewCell: RswiftResources.NibReferenceReuseIdentifier<SimilarTableViewCell, SimilarTableViewCell> { .init(name: "SimilarTableViewCell", bundle: bundle, identifier: "SimilarTableViewCell") }

    /// Nib `SwitchCustomTableViewCell`.
    var switchCustomTableViewCell: RswiftResources.NibReference<SwitchCustomTableViewCell> { .init(name: "SwitchCustomTableViewCell", bundle: bundle) }

    /// Nib `TableFooterView`.
    var tableFooterView: RswiftResources.NibReference<TableFooterView> { .init(name: "TableFooterView", bundle: bundle) }

    /// Nib `TrailerTableViewCell`.
    var trailerTableViewCell: RswiftResources.NibReferenceReuseIdentifier<TrailerTableViewCell, TrailerTableViewCell> { .init(name: "TrailerTableViewCell", bundle: bundle, identifier: "TrailerTableViewCell") }

    /// Nib `TVCollectionViewCell`.
    var tvCollectionViewCell: RswiftResources.NibReferenceReuseIdentifier<TVCollectionViewCell, TVCollectionViewCell> { .init(name: "TVCollectionViewCell", bundle: bundle, identifier: "TVCollectionViewCell") }

    func validate() throws {
      if UIKit.UIImage(named: "Folder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Folder' is used in nib 'BookmarkTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "play", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'play' is used in nib 'DownloadingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Download", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Download' is used in nib 'EpisodeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Eye", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Eye' is used in nib 'EpisodeTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "episode", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'episode' is used in nib 'EpisodesCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Delete", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Delete' is used in nib 'ItemCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "IMDB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'IMDB' is used in nib 'ItemCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "KinoPub", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'KinoPub' is used in nib 'ItemCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Kinopoisk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopoisk' is used in nib 'ItemCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Move", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Move' is used in nib 'ItemCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "poster-placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'poster-placeholder' is used in nib 'ItemCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Movies", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Movies' is used in nib 'MenuTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "IMDB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'IMDB' is used in nib 'RatingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "KinoPub", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'KinoPub' is used in nib 'RatingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Kinopoisk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopoisk' is used in nib 'RatingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Views", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Views' is used in nib 'RatingTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "IMDB", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'IMDB' is used in nib 'SearchResultTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "KinoPub", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'KinoPub' is used in nib 'SearchResultTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Kinopoisk", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopoisk' is used in nib 'SearchResultTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Sports-placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Sports-placeholder' is used in nib 'TVCollectionViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Kinopub Footer", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopub Footer' is used in nib 'TableFooterView', but couldn't be loaded.") }
      if UIKit.UIImage(named: "Views", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Views' is used in nib 'TrailerTableViewCell', but couldn't be loaded.") }
      if UIKit.UIImage(named: "episode", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'episode' is used in nib 'TrailerTableViewCell', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 23 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `ActorCollectionViewCell`.
    var actorCollectionViewCell: RswiftResources.ReuseIdentifier<ActorCollectionViewCell> { .init(identifier: "ActorCollectionViewCell") }

    /// Reuse identifier `BookmarkCell`.
    var bookmarkCell: RswiftResources.ReuseIdentifier<BookmarkTableViewCell> { .init(identifier: "BookmarkCell") }

    /// Reuse identifier `BookmarkTableViewCell`.
    var bookmarkTableViewCell: RswiftResources.ReuseIdentifier<BookmarkTableViewCell> { .init(identifier: "BookmarkTableViewCell") }

    /// Reuse identifier `ButtonsTableViewCell`.
    var buttonsTableViewCell: RswiftResources.ReuseIdentifier<ButtonsTableViewCell> { .init(identifier: "ButtonsTableViewCell") }

    /// Reuse identifier `CastTableViewCell`.
    var castTableViewCell: RswiftResources.ReuseIdentifier<CastTableViewCell> { .init(identifier: "CastTableViewCell") }

    /// Reuse identifier `Cell`.
    var cell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> { .init(identifier: "Cell") }

    /// Reuse identifier `DescTableViewCell`.
    var descTableViewCell: RswiftResources.ReuseIdentifier<DescTableViewCell> { .init(identifier: "DescTableViewCell") }

    /// Reuse identifier `EmptyCell`.
    var emptyCell: RswiftResources.ReuseIdentifier<UIKit.UITableViewCell> { .init(identifier: "EmptyCell") }

    /// Reuse identifier `EpisodesCollectionViewCell`.
    var episodesCollectionViewCell: RswiftResources.ReuseIdentifier<EpisodesCollectionViewCell> { .init(identifier: "EpisodesCollectionViewCell") }

    /// Reuse identifier `HeaderCell`.
    var headerCell: RswiftResources.ReuseIdentifier<UIKit.UICollectionReusableView> { .init(identifier: "HeaderCell") }

    /// Reuse identifier `InfoTableViewCell`.
    var infoTableViewCell: RswiftResources.ReuseIdentifier<InfoTableViewCell> { .init(identifier: "InfoTableViewCell") }

    /// Reuse identifier `ItemCollectionViewCell`.
    var itemCollectionViewCell: RswiftResources.ReuseIdentifier<ItemCollectionViewCell> { .init(identifier: "ItemCollectionViewCell") }

    /// Reuse identifier `ItemsTableViewCell`.
    var itemsTableViewCell: RswiftResources.ReuseIdentifier<ItemsTableViewCell> { .init(identifier: "ItemsTableViewCell") }

    /// Reuse identifier `LoadingItemCollectionViewCell`.
    var loadingItemCollectionViewCell: RswiftResources.ReuseIdentifier<LoadingItemCollectionViewCell> { .init(identifier: "LoadingItemCollectionViewCell") }

    /// Reuse identifier `MenuTableViewCell`.
    var menuTableViewCell: RswiftResources.ReuseIdentifier<MenuTableViewCell> { .init(identifier: "MenuTableViewCell") }

    /// Reuse identifier `RatingTableViewCell`.
    var ratingTableViewCell: RswiftResources.ReuseIdentifier<RatingTableViewCell> { .init(identifier: "RatingTableViewCell") }

    /// Reuse identifier `SearchCollectionReusableView`.
    var searchCollectionReusableView: RswiftResources.ReuseIdentifier<SearchCollectionReusableView> { .init(identifier: "SearchCollectionReusableView") }

    /// Reuse identifier `SearchResultTableViewCell`.
    var searchResultTableViewCell: RswiftResources.ReuseIdentifier<SearchResultTableViewCell> { .init(identifier: "SearchResultTableViewCell") }

    /// Reuse identifier `SeasonHeaderView`.
    var seasonHeaderView: RswiftResources.ReuseIdentifier<SeasonHeaderView> { .init(identifier: "SeasonHeaderView") }

    /// Reuse identifier `SeasonTableViewCell`.
    var seasonTableViewCell: RswiftResources.ReuseIdentifier<SeasonTableViewCell> { .init(identifier: "SeasonTableViewCell") }

    /// Reuse identifier `SimilarTableViewCell`.
    var similarTableViewCell: RswiftResources.ReuseIdentifier<SimilarTableViewCell> { .init(identifier: "SimilarTableViewCell") }

    /// Reuse identifier `TrailerTableViewCell`.
    var trailerTableViewCell: RswiftResources.ReuseIdentifier<TrailerTableViewCell> { .init(identifier: "TrailerTableViewCell") }

    /// Reuse identifier `TVCollectionViewCell`.
    var tvCollectionViewCell: RswiftResources.ReuseIdentifier<TVCollectionViewCell> { .init(identifier: "TVCollectionViewCell") }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 11 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var authViewController: authViewController { .init(bundle: bundle) }
    var bookmarks: bookmarks { .init(bundle: bundle) }
    var collections: collections { .init(bundle: bundle) }
    var detailViewController: detailViewController { .init(bundle: bundle) }
    var download: download { .init(bundle: bundle) }
    var filterViewController: filterViewController { .init(bundle: bundle) }
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }
    var profile: profile { .init(bundle: bundle) }
    var settings: settings { .init(bundle: bundle) }
    var sportCollectionViewController: sportCollectionViewController { .init(bundle: bundle) }

    func authViewController(bundle: Foundation.Bundle) -> authViewController {
      .init(bundle: bundle)
    }
    func bookmarks(bundle: Foundation.Bundle) -> bookmarks {
      .init(bundle: bundle)
    }
    func collections(bundle: Foundation.Bundle) -> collections {
      .init(bundle: bundle)
    }
    func detailViewController(bundle: Foundation.Bundle) -> detailViewController {
      .init(bundle: bundle)
    }
    func download(bundle: Foundation.Bundle) -> download {
      .init(bundle: bundle)
    }
    func filterViewController(bundle: Foundation.Bundle) -> filterViewController {
      .init(bundle: bundle)
    }
    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func profile(bundle: Foundation.Bundle) -> profile {
      .init(bundle: bundle)
    }
    func settings(bundle: Foundation.Bundle) -> settings {
      .init(bundle: bundle)
    }
    func sportCollectionViewController(bundle: Foundation.Bundle) -> sportCollectionViewController {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.authViewController.validate()
      try self.bookmarks.validate()
      try self.collections.validate()
      try self.detailViewController.validate()
      try self.download.validate()
      try self.filterViewController.validate()
      try self.launchScreen.validate()
      try self.main.validate()
      try self.profile.validate()
      try self.settings.validate()
      try self.sportCollectionViewController.validate()
    }


    /// Storyboard `AuthViewController`.
    struct authViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = AuthViewController

      let bundle: Foundation.Bundle

      let name = "AuthViewController"

      var authViewController: RswiftResources.StoryboardViewControllerIdentifier<AuthViewController> { .init(identifier: "AuthViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Icon-App-iTunes", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Icon-App-iTunes' is used in storyboard 'AuthViewController', but couldn't be loaded.") }
        if authViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'authViewController' could not be loaded from storyboard 'AuthViewController' as 'AuthViewController'.") }
      }
    }

    /// Storyboard `Bookmarks`.
    struct bookmarks: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = NavigationController

      let bundle: Foundation.Bundle

      let name = "Bookmarks"

      var bokmarksNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "BokmarksNavVC", storyboard: name, bundle: bundle) }
      var bookmarkCollectionViewController: RswiftResources.StoryboardViewControllerIdentifier<BookmarkCollectionViewController> { .init(identifier: "BookmarkCollectionViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Folder Add", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Folder Add' is used in storyboard 'Bookmarks', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Kinopub (Menu)", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopub (Menu)' is used in storyboard 'Bookmarks', but couldn't be loaded.") }
        if bokmarksNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'bokmarksNavVC' could not be loaded from storyboard 'Bookmarks' as 'NavigationController'.") }
        if bookmarkCollectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'bookmarkCollectionViewController' could not be loaded from storyboard 'Bookmarks' as 'BookmarkCollectionViewController'.") }
      }
    }

    /// Storyboard `Collections`.
    struct collections: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = NavigationController

      let bundle: Foundation.Bundle

      let name = "Collections"

      var collectionsNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "CollectionsNavVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Kinopub (Menu)", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopub (Menu)' is used in storyboard 'Collections', but couldn't be loaded.") }
        if collectionsNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'collectionsNavVC' could not be loaded from storyboard 'Collections' as 'NavigationController'.") }
      }
    }

    /// Storyboard `DetailViewController`.
    struct detailViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = DetailViewController

      let bundle: Foundation.Bundle

      let name = "DetailViewController"

      var detailViewController: RswiftResources.StoryboardViewControllerIdentifier<DetailViewController> { .init(identifier: "DetailViewController", storyboard: name, bundle: bundle) }
      var detailsNavigation: RswiftResources.StoryboardViewControllerIdentifier<UIKit.UINavigationController> { .init(identifier: "detailsNavigation", storyboard: name, bundle: bundle) }
      var oldDetailViewController: RswiftResources.StoryboardViewControllerIdentifier<OldDetailViewController> { .init(identifier: "OldDetailViewController", storyboard: name, bundle: bundle) }
      var seasonTableViewController: RswiftResources.StoryboardViewControllerIdentifier<SeasonTableViewController> { .init(identifier: "SeasonTableViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Bookmark Ribbon-50", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Bookmark Ribbon-50' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Download-50", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Download-50' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Download-bar", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Download-bar' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "More", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'More' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Play Button (Shadow)", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Play Button (Shadow)' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Share", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Share' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn-watch", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'btn-watch' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "poster-placeholder", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'poster-placeholder' is used in storyboard 'DetailViewController', but couldn't be loaded.") }
        if detailViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'detailViewController' could not be loaded from storyboard 'DetailViewController' as 'DetailViewController'.") }
        if oldDetailViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'oldDetailViewController' could not be loaded from storyboard 'DetailViewController' as 'OldDetailViewController'.") }
        if seasonTableViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'seasonTableViewController' could not be loaded from storyboard 'DetailViewController' as 'SeasonTableViewController'.") }
        if detailsNavigation() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'detailsNavigation' could not be loaded from storyboard 'DetailViewController' as 'UIKit.UINavigationController'.") }
      }
    }

    /// Storyboard `Download`.
    struct download: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Download"

      var downloadNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "DownloadNavVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "More", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'More' is used in storyboard 'Download', but couldn't be loaded.") }
        if downloadNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'downloadNavVC' could not be loaded from storyboard 'Download' as 'NavigationController'.") }
      }
    }

    /// Storyboard `FilterViewController`.
    struct filterViewController: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UINavigationController

      let bundle: Foundation.Bundle

      let name = "FilterViewController"

      var filterViewController: RswiftResources.StoryboardViewControllerIdentifier<FilterViewController> { .init(identifier: "FilterViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if filterViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'filterViewController' could not be loaded from storyboard 'FilterViewController' as 'FilterViewController'.") }
      }
    }

    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {
        if UIKit.UIImage(named: "Icon-App-iTunes", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Icon-App-iTunes' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = HostViewController

      let bundle: Foundation.Bundle

      let name = "Main"

      var actorCollectionViewController: RswiftResources.StoryboardViewControllerIdentifier<ActorCollectionViewController> { .init(identifier: "ActorCollectionViewController", storyboard: name, bundle: bundle) }
      var homeNavVc: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "HomeNavVc", storyboard: name, bundle: bundle) }
      var homeViewController: RswiftResources.StoryboardViewControllerIdentifier<HomeViewController> { .init(identifier: "HomeViewController", storyboard: name, bundle: bundle) }
      var itemNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "ItemNavVC", storyboard: name, bundle: bundle) }
      var itemsCollectionViewController: RswiftResources.StoryboardViewControllerIdentifier<ItemsCollectionViewController> { .init(identifier: "ItemsCollectionViewController", storyboard: name, bundle: bundle) }
      var navigationMenu: RswiftResources.StoryboardViewControllerIdentifier<NavigationMenuViewController> { .init(identifier: "NavigationMenu", storyboard: name, bundle: bundle) }
      var tabBarViewController: RswiftResources.StoryboardViewControllerIdentifier<TabBarViewController> { .init(identifier: "TabBarViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Circled User Male-100", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Circled User Male-100' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Filters", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Filters' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Kinopub (Menu)", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopub (Menu)' is used in storyboard 'Main', but couldn't be loaded.") }
        if actorCollectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'actorCollectionViewController' could not be loaded from storyboard 'Main' as 'ActorCollectionViewController'.") }
        if homeNavVc() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeNavVc' could not be loaded from storyboard 'Main' as 'NavigationController'.") }
        if homeViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if itemNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'itemNavVC' could not be loaded from storyboard 'Main' as 'NavigationController'.") }
        if itemsCollectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'itemsCollectionViewController' could not be loaded from storyboard 'Main' as 'ItemsCollectionViewController'.") }
        if navigationMenu() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'navigationMenu' could not be loaded from storyboard 'Main' as 'NavigationMenuViewController'.") }
        if tabBarViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'tabBarViewController' could not be loaded from storyboard 'Main' as 'TabBarViewController'.") }
      }
    }

    /// Storyboard `Profile`.
    struct profile: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Profile"

      var profileNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "ProfileNavVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Circled User Male-100", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Circled User Male-100' is used in storyboard 'Profile', but couldn't be loaded.") }
        if profileNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'profileNavVC' could not be loaded from storyboard 'Profile' as 'NavigationController'.") }
      }
    }

    /// Storyboard `Settings`.
    struct settings: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "Settings"

      var aboutViewController: RswiftResources.StoryboardViewControllerIdentifier<AboutViewController> { .init(identifier: "AboutViewController", storyboard: name, bundle: bundle) }
      var menuSectionViewController: RswiftResources.StoryboardViewControllerIdentifier<MenuSectionViewController> { .init(identifier: "MenuSectionViewController", storyboard: name, bundle: bundle) }
      var settingsNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "SettingsNavVC", storyboard: name, bundle: bundle) }
      var settingsVC: RswiftResources.StoryboardViewControllerIdentifier<SetViewController> { .init(identifier: "SettingsVC", storyboard: name, bundle: bundle) }
      var thanksViewController: RswiftResources.StoryboardViewControllerIdentifier<ThanksViewController> { .init(identifier: "ThanksViewController", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "icon", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'icon' is used in storyboard 'Settings', but couldn't be loaded.") }
        if aboutViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'aboutViewController' could not be loaded from storyboard 'Settings' as 'AboutViewController'.") }
        if menuSectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'menuSectionViewController' could not be loaded from storyboard 'Settings' as 'MenuSectionViewController'.") }
        if settingsNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsNavVC' could not be loaded from storyboard 'Settings' as 'NavigationController'.") }
        if settingsVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'Settings' as 'SetViewController'.") }
        if thanksViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'thanksViewController' could not be loaded from storyboard 'Settings' as 'ThanksViewController'.") }
      }
    }

    /// Storyboard `SportCollectionViewController`.
    struct sportCollectionViewController: RswiftResources.StoryboardReference {
      let bundle: Foundation.Bundle

      let name = "SportCollectionViewController"

      var sportCollectionViewController: RswiftResources.StoryboardViewControllerIdentifier<SportCollectionViewController> { .init(identifier: "SportCollectionViewController", storyboard: name, bundle: bundle) }
      var sportNavVC: RswiftResources.StoryboardViewControllerIdentifier<NavigationController> { .init(identifier: "SportNavVC", storyboard: name, bundle: bundle) }

      func validate() throws {
        if UIKit.UIImage(named: "Kinopub (Menu)", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Image named 'Kinopub (Menu)' is used in storyboard 'SportCollectionViewController', but couldn't be loaded.") }
        if sportCollectionViewController() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sportCollectionViewController' could not be loaded from storyboard 'SportCollectionViewController' as 'SportCollectionViewController'.") }
        if sportNavVC() == nil { throw RswiftResources.ValidationError("[R.swift] ViewController with identifier 'sportNavVC' could not be loaded from storyboard 'SportCollectionViewController' as 'NavigationController'.") }
      }
    }
  }
}